Reverse Integer
Given a 32-bit signed integer, reverse digits of an integer.
Note: 
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [-2^31, 2^31 -1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows. 
Ans:
class Solution {
    public int reverse(int x) {
        int lastDigit = 0;
        int reverse = 0;
        while(x!=0)
        {   lastDigit = x%10; //get the last digit, i.e 1234.(5)
          if (reverse>Integer.MAX_VALUE/10||(reverse==(Integer.MAX_VALUE/10) &&lastDigit>7)) //test if reverse is out of bound, 2^31 =...8-1=...7, i.e 5432 (will be *10) & 54311 (max)
        {return 0;}
        if (reverse<Integer.MIN_VALUE/10||(reverse==(Integer.MIN_VALUE/10) &&lastDigit<-8))
        {return 0;}
            reverse = reverse*10 + lastDigit; // i.e 5*10 + 4 = 54 in reversed order
            x/=10; //integer divide integer to get a shorten integer form
        }
        return reverse;
    }
}